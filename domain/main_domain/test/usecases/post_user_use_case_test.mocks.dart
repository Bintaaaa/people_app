// Mocks generated by Mockito 5.4.4 from annotations
// in main_domain/test/usecases/post_user_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:common/error/failure_response.dart' as _i5;
import 'package:dependencies/dartz/dartz.dart' as _i2;
import 'package:main_domain/domain/entities/login_entity.dart' as _i7;
import 'package:main_domain/domain/entities/user_entity.dart' as _i6;
import 'package:main_domain/domain/repositories/user_respository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FailureResponse, List<_i6.UserEntity>>>
      fetchUsers() => (super.noSuchMethod(
            Invocation.method(
              #fetchUsers,
              [],
            ),
            returnValue: _i4.Future<
                    _i2
                    .Either<_i5.FailureResponse, List<_i6.UserEntity>>>.value(
                _FakeEither_0<_i5.FailureResponse, List<_i6.UserEntity>>(
              this,
              Invocation.method(
                #fetchUsers,
                [],
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.FailureResponse, List<_i6.UserEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.FailureResponse, _i7.LoginEntity>> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.FailureResponse, _i7.LoginEntity>>.value(
                _FakeEither_0<_i5.FailureResponse, _i7.LoginEntity>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.FailureResponse, _i7.LoginEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.FailureResponse, _i6.UserEntity>> createUser({
    required String? name,
    required String? job,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [],
          {
            #name: name,
            #job: job,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.FailureResponse, _i6.UserEntity>>.value(
                _FakeEither_0<_i5.FailureResponse, _i6.UserEntity>(
          this,
          Invocation.method(
            #createUser,
            [],
            {
              #name: name,
              #job: job,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.FailureResponse, _i6.UserEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.FailureResponse, _i6.UserEntity>> updateUser({
    required int? id,
    required String? name,
    required String? job,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [],
          {
            #id: id,
            #name: name,
            #job: job,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.FailureResponse, _i6.UserEntity>>.value(
                _FakeEither_0<_i5.FailureResponse, _i6.UserEntity>(
          this,
          Invocation.method(
            #updateUser,
            [],
            {
              #id: id,
              #name: name,
              #job: job,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.FailureResponse, _i6.UserEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.FailureResponse, bool>> deleteUser(
          {required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.FailureResponse, bool>>.value(
            _FakeEither_0<_i5.FailureResponse, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.FailureResponse, bool>>);
}
